const e=e=>"function"==typeof e,r=(r,t="")=>{if(!e(r))throw new TypeError(`${t} Expecting function arg`.trim())},t=r=>e(r.subscribe),n=(t=undefined,n=null)=>{const i=r=>e(n?.persist)&&n.persist(r);let s=(()=>{const e=new Map,r=r=>(e.has(r)||e.set(r,new Set),e.get(r)),t=(e,t)=>{if("function"!=typeof t)throw new TypeError("Expecting callback function as second argument");return r(e).add(t),()=>r(e).delete(t)};return{publish:(e,t={})=>{r(e).forEach((e=>e(t)))},subscribe:t,subscribeOnce:(e,r)=>{const n=t(e,(e=>{r(e),n()}));return n},unsubscribeAll:r=>e.delete(r)}})(),c=t;i(c);const o=()=>c,u=e=>{c!==e&&(c=e,i(c),s.publish("change",c))};return{set:u,get:o,update:e=>{r(e,"[update]"),u(e(o()))},subscribe:e=>(r(e,"[subscribe]"),e(c),s.subscribe("change",e))}},i=e=>"object"==typeof e&&!Array.isArray(e)&&null!==e,s=(s,c=[],o=!1)=>{const u=e=>{if(!Array.isArray(e)||!e.every(i))throw new TypeError("Expecting array of initial item objects");return e};if(!Array.isArray(c)||!c.every((e=>!isNaN(e)&&void 0!==s[e])))throw new TypeError("Expecting array of initial selected indexes");const a=n(u(s)),b=n(c),p=e=>[...new Set(e)],l=((i,s,c=null)=>{const o=r=>e(c?.persist)&&c.persist(r),u=n(c?.initialValue),a=[];if(i.forEach((e=>{if(!t(e))throw new TypeError("Expecting array of StoreLike objects");e.subscribe((e=>a.push(e)))()})),!e(s))throw new TypeError("Expecting second argument to be the derivative function");if(!s.length||s.length>2)throw new TypeError("Expecting the derivative function to have exactly 1 or 2 arguments");let b=0,p=[];return{get:u.get,subscribe:e=>{r(e,"[derived.subscribe]"),b++||i.forEach(((e,r)=>{p.push(e.subscribe((e=>{a[r]=e,1===s.length?(u.set(s(a)),o(u.get())):s(a,(e=>{u.set(e),o(u.get())}))})))}));const t=u.subscribe(e);return()=>{--b||(p.forEach((e=>e())),p=[]),t()}}}})([a,b],(([e,r])=>({items:e,selected:r,selection:r.map((r=>e[r]))}))),f=e=>{if("number"!=typeof e)throw new TypeError("Expecting numeric index");const r=a.get();return r.length&&void 0!==r[e]?[e]:[]},g=(e,r)=>{const t=f(e);b.update((e=>!o||r?t:p([...e,...t])))},d={subscribe:l.subscribe,get:l.get,select:(e,r=!0)=>(Array.isArray(e)?((e,r)=>{if(!e.length)return r?b.set([]):void 0;if(!o)return g(e[e.length-1],r);const t=e.reduce(((e,r)=>[...e,...f(r)]),[]);b.update((e=>p(r?t:[...e,...t])))})(e,r):g(e,r),d),findIndexBy:(e,r)=>((e,r,t)=>t.findIndex((t=>t&&void 0!==t[e]&&t[e]===r)))(e,r,a.get()),reset:(e=[])=>(b.set([]),a.set(u(e||[])),d)};return d};export{s as createSelectionStore};
